////////////////////////////////////////////////////////////////////////////////
// GLOBALS 
////////////////////////////////////////////////////////////////////////////////

Texture2D shaderTexture;
SamplerState SampleType;
cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

////////////////////////////////////////////////////////////////////////////////
// TYPEDEFS 
////////////////////////////////////////////////////////////////////////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal: NORMAL;
};

////////////////////////////////////////////////////////////////////////////////
// PIXEL Shader
////////////////////////////////////////////////////////////////////////////////
float4 PS_Main(PixelInputType input): SV_TARGET
{
    float4 textureColor;
    float4 color, out_ambient, out_diffuse;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

    //set the default output color to the ambient light value
    out_ambient = ambientColor;

    out_diffuse = saturate(diffuseColor*0.5* -dot(input.normal, lightDirection) );

    // Calculate the amount of light on this pixel.
    color = saturate( out_ambient + out_diffuse);
    color = color*textureColor;

    return color;
}














